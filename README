Lexer Proiect ETAPA 1 LFA

Implementarea acestei teme am inceput cu definirea unei clase care imi va
reprezenta DFAul meu. Acesta are campuri de alfabet, numele DFAului,
tranzitiile (care sunt reprezentate printr-un dictionar de tuplu si un int),
starea curenta, un flag pentru sink state, lista cu stari finale si pasul
curent. Pentru clasa am definit niste getteri cu care voi opera mai tarziu si
un setter pentru a seta DFAul la starea initiala, in caz daca am parsurs o 
bucata din pattern si am ajung in starile finale a automatelor.


runlexer with helper parse_tokens: Citesc din fisiere patternul si automatele,
fac un strip peste automate, parsand acest string instantiez automatele.


Algoritmul general se gaseste in metodele compute_pattern si analize.


Ideea generala: Am parcurs patternul dat la input caracter cu caracter, pentru
fiecare caracter am parcurs toate automatele care erau dispuse in fisierul de in,
si daca caracterul curent face match pe stare curenta si caracter, atunci fac
update la starea curenta, salvez tokenul deja parcurs, incrementez pozitia DFAului
cu 1, verific daca starea noua este in stare finala, adaug tokenul parcurs la campul
de stare finala_token, acest camp se va apdata doar daca automatul a ajuns in stare finala,
mai salvez si pasul la care s-a gasit acea stare finala, practica e pentru indexul din
patternul general. Daca nu s-a gasit o tranzitie cu caracterul curent si starea curenta,
atunci notez automatul fiind in sink state.

Dupa ce am parcurs toate automatele cu caracterul curent, se alege DFAul cu cel mai
lung token, returnez numele + tokenul final.